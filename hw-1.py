from collections import UserDict
from typing import Callable
from datetime import datetime, timedelta

# –ö–ª–∞—Å–∏
class Field:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)


class Name(Field):
    pass


class Phone(Field):
    def __init__(self, value):
        if not value.isdigit() or len(value) != 10:
            raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ä—ñ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä.")
        super().__init__(value)

class Birthday(Field):
    def __init__(self, value):
        try:
            self.value = datetime.strptime(value, "%d.%m.%Y")
        except ValueError:
            raise ValueError("–ù–µ –≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM.YYYY")

class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.birthday = None

    def add_phone(self, phone):
        self.phones.append(Phone(phone))

    def remove_phone(self, phone):
        for p in self.phones:
            if p.value == phone:
                self.phones.remove(p)
                return True
        return False

    def edit_phone(self, old_phone, new_phone):
        for i, p in enumerate(self.phones):
            if p.value == old_phone:
                self.phones[i] = Phone(new_phone)
                return True
        return False

    def find_phone(self, phone):
        for p in self.phones:
            if p.value == phone:
                return p
        return None

    def add_birthday(self, birthday):
        self.birthday = Birthday(birthday)

    def __str__(self):
        phones_str = "; ".join(p.value for p in self.phones)

        if self.birthday is not None:
            bday_str = f", birthday: {self.birthday.value.strftime('%d.%m.%Y')}"
        else:
            bday_str = ""

        return f"Contact name: {self.name.value}, phones: {phones_str}{bday_str}"


class AddressBook(UserDict):
    def add_record(self, record: Record):
        self.data[record.name.value] = record

    def find(self, name: str):
        return self.data.get(name)

    def delete(self, name: str):
        if name in self.data:
            del self.data[name]

    def get_upcoming_birthdays(self):
        today = datetime.today()
        next_week = today + timedelta(days=7)
        result = []
        for record in self.data.values():
            if record.birthday:
                bday_this_year = record.birthday.value.replace(year=today.year)
                if today <= bday_this_year <= next_week:
                    result.append(f"üéÇ –ü—Ä–∏–≤—ñ—Ç–∞—Ç–∏: {record.name.value} ({bday_this_year.strftime('%d.%m')})")
        return result

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
def input_error(func: Callable):
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except KeyError:
            return "‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        except ValueError:
            return "‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä) —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª."
        except IndexError:
            return "‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏."
    return inner


# –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç
@input_error
def add_contact(args, book):
    name, phone = args
    record = book.find(name)
    if record:
        record.add_phone(phone)
    else:
        record = Record(name)
        record.add_phone(phone)
        book.add_record(record)
    return f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {name} –¥–æ–¥–∞–Ω–æ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ."

# –ó–º—ñ–Ω–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
@input_error
def change_contact(args, book):
    name, old_phone, new_phone = args
    record = book.find(name)
    if not record:
        raise KeyError
    if record.edit_phone(old_phone, new_phone):
        return f"üîÅ –¢–µ–ª–µ—Ñ–æ–Ω {old_phone} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_phone}."
    return "‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

# –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ —ñ–º'—è–º
@input_error
def show_phone(args, book):
    name = args[0]
    record = book.find(name)
    if not record:
        raise KeyError
    phones = ", ".join(p.value for p in record.phones)
    return f"üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏ {name}: {phones}"

@input_error
def add_birthday(args, book):
    name, bday = args
    record = book.find(name)
    if not record:
        raise KeyError
    record.add_birthday(bday)
    return f"üéÇ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è {name} –¥–æ–¥–∞–Ω–æ."

@input_error
def show_birthday(args, book):
    name = args[0]
    record = book.find(name)
    if not record or not record.birthday:
        return "‚ùå –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    return f"üéÇ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name}: {record.birthday.value.strftime('%d.%m.%Y')}"

@input_error
def birthdays(args, book):
    upcoming = book.get_upcoming_birthdays()
    if not upcoming:
        return "üìç –ù–µ–º–∞—î –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω—å –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç–∏–∂–Ω—ñ"
    return "\n".join(upcoming)


# –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏
def show_all(book):
    if not book.data:
        return "–ö–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î."
    return "\n".join(str(record) for record in book.values())

def show_birthdays(book):
    result = book.get_upcoming_birthdays()
    return "\n".join(result) if result else "–ù–µ–º–∞—î –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å –Ω–∞ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ."

#MAIN
def main():
    book = AddressBook()
    print("üìû –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ –ø–æ–º—ñ—á–Ω–∏–∫-–±–æ—Ç–∞!")

    while True:
        user_input = input("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É: ").strip()
        if not user_input:
            continue

        cmd, *args = user_input.split()
        command = cmd.lower()

        if command in ["close", "exit"]:
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        elif command == "hello":
            print("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?")
        elif command == "add":
            print(add_contact(args, book))
        elif command == "change":
            print(change_contact(args, book))
        elif command == "phone":
            print(show_phone(args, book))
        elif command == "show-bday":
            print(show_birthday(args, book))
        elif command == "add-bday":
            print(add_birthday(args, book))
        elif command == "all":
            print(show_all(book))
        else:
            print("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    main()
